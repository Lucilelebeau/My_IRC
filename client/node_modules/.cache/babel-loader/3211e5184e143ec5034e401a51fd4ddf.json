{"ast":null,"code":"var _jsxFileName = \"/home/my_irc/client/src/components/home.js\";\nimport React, { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Navbar from '../components/navbar.js';\nimport '../css/home.css';\nimport socket from './connect.js'; //socket.emit('newUser')\n\nfunction Home() {\n  //déclaration des states \n  const [mess, setMess] = useState({\n    message: '',\n    name: ''\n  });\n  const [chat, setChat] = useState([]); //Login\n\n  const [namelog, setName] = useState();\n  useEffect(() => {\n    socket.on('enter', nameLogin => {\n      console.log(nameLogin);\n      setName(nameLogin);\n      const {\n        name,\n        message\n      } = mess;\n      setMess({\n        message: '',\n        name: namelog\n      }); //socket.emit('message', { message, name }, [])\n      //setMess({ message: '', name })\n    });\n  }); //Message logIn\n\n  const [alert, setAlert] = useState([{\n    log: '',\n    messager: ''\n  }]);\n  useEffect(() => {\n    socket.on('alert', ({\n      log,\n      messager\n    }) => {\n      setAlert([...alert, {\n        log,\n        messager\n      }]);\n    });\n  });\n\n  const renderAlert = () => {\n    return alert.map(({\n      log,\n      messager\n    }, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, log, \" \", messager)));\n  }; //déclenché en écrivant, met à jour les valeurs messages\n\n\n  const onTextChange = e => {\n    setMess({ ...mess,\n      [e.target.name]: e.target.value\n    });\n  }; //déclenché par le form, envoi les infos messages au serveur\n\n\n  const onMessageSubmit = e => {\n    e.preventDefault();\n    const {\n      name,\n      message\n    } = mess;\n    socket.emit('message', {\n      name,\n      message\n    });\n    setMess({\n      message: '',\n      name\n    });\n  }; //déclenchement auto, récup évènement messages\n\n\n  useEffect(() => {\n    socket.on('message', ({\n      name,\n      message\n    }) => {\n      setChat([...chat, {\n        name,\n        message\n      }]);\n    });\n  }); //fin du render chat\n\n  const renderChat = () => {\n    return chat.map(({\n      name,\n      message\n    }, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, name, \" : \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }\n    }, message))));\n  }; //render All\n\n  /*const [recupAll, setAll] = useState([])\n  socket.on('all', clients => {\n    setAll(clients)\n  })\n  const renderAll = () => {\n    return recupAll.map((id, index) => (\n      <div key={index}>\n        <h3>\n          {id}\n        </h3>\n      </div>\n    ))\n  }*/\n  //render All\n\n\n  const [recupAll, setAll] = useState([]);\n  socket.on('allUser', clients => {\n    setAll(clients);\n  });\n\n  const renderAll = () => {\n    return recupAll.map((id, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, id)));\n  }; // room\n\n\n  socket.emit('create', 'room1'); //render\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onMessageSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Messenger\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    onChange: e => onTextChange(e),\n    value: mess.name,\n    label: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"message\",\n    onChange: e => onTextChange(e),\n    value: mess.message,\n    id: \"outlined-multiline-static\",\n    variant: \"outlined\",\n    label: \"Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"render-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, \"Chat Log\"), renderChat(), renderAlert()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, \"List connected\"), renderAll()))));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/my_irc/client/src/components/home.js"],"names":["React","useState","useEffect","TextField","Container","Navbar","socket","Home","mess","setMess","message","name","chat","setChat","namelog","setName","on","nameLogin","console","log","alert","setAlert","messager","renderAlert","map","index","onTextChange","e","target","value","onMessageSubmit","preventDefault","emit","renderChat","recupAll","setAll","clients","renderAll","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container'\nimport Navbar from '../components/navbar.js'\nimport '../css/home.css'\n\nimport socket from './connect.js'\n\n//socket.emit('newUser')\n\nfunction Home() {\n  \n  //déclaration des states \n  const [mess, setMess] = useState({ message: '', name: '' })\n  const [chat, setChat] = useState([])\n  \n\n  //Login\n  const [namelog, setName] = useState()\n  useEffect(() => {\n    socket.on('enter', nameLogin => {\n      console.log(nameLogin)\n      setName(nameLogin)\n      const { name, message } = mess\n      setMess({message: '', name: namelog})\n      //socket.emit('message', { message, name }, [])\n      //setMess({ message: '', name })\n    })\n  })\n\n  //Message logIn\n  const [alert, setAlert] = useState([{ log: '', messager:''}])\n  useEffect(() =>{\n    socket.on('alert', ({ log, messager}) => {\n      setAlert([...alert, { log, messager}])\n    })\n  })\n  const renderAlert = () => {\n    return alert.map(({ log, messager }, index) => (\n      <div key={index}>\n        <h4>\n        {log} {messager}\n        </h4>\n      </div>\n    ))\n  }\n  \n  \n  //déclenché en écrivant, met à jour les valeurs messages\n  const onTextChange = e => {\n    setMess({ ...mess, [e.target.name]: e.target.value })\n  }\n\n  //déclenché par le form, envoi les infos messages au serveur\n  const onMessageSubmit = e => {\n    e.preventDefault()\n    const { name, message } = mess\n    socket.emit('message', { name, message })\n    setMess({ message: '', name })\n  }\n\n  //déclenchement auto, récup évènement messages\n  useEffect(() => {\n    socket.on('message', ({ name, message }) => {\n      setChat([...chat, { name, message }])\n    })\n  })\n\n  //fin du render chat\n  const renderChat = () => {\n    return chat.map(({ name, message }, index) => (\n      <div key={index}>\n        <h3>\n          {name} : <span>{message}</span>\n        </h3>\n      </div>\n    ))\n  }\n\n  //render All\n  /*const [recupAll, setAll] = useState([])\n  socket.on('all', clients => {\n    setAll(clients)\n  })\n  const renderAll = () => {\n    return recupAll.map((id, index) => (\n      <div key={index}>\n        <h3>\n          {id}\n        </h3>\n      </div>\n    ))\n  }*/\n\n  //render All\n  const [recupAll, setAll] = useState([])\n  socket.on('allUser', clients => {\n    setAll(clients)\n  })\n  const renderAll = () => {\n    return recupAll.map((id, index) => (\n      <div key={index}>\n        <h3>\n          {id}\n        </h3>\n      </div>\n    ))\n  }\n\n\n\n  // room\n  socket.emit('create', 'room1');\n\n  //render\n  return (\n    <div>\n    <Navbar/>\n    <Container>\n    <div className=\"card\">\n      <form onSubmit={onMessageSubmit}>\n        <h1>Messenger</h1>\n        <div className=\"name-field\">\n          <TextField\n            name=\"name\"\n            onChange={e => onTextChange(e)}\n            value={mess.name}\n            label=\"Name\"\n          />\n        </div>\n      \n        <div>\n          <TextField\n            name=\"message\"\n            onChange={e => onTextChange(e)}\n            value={mess.message}\n            id=\"outlined-multiline-static\"\n            variant=\"outlined\"\n            label=\"Message\"\n          />\n        </div>\n        <button>Send Message</button>\n      </form>\n      <div className=\"render-chat\">\n        <h1>Chat Log</h1>\n        {renderChat()}\n        {renderAlert()}\n      </div>\n      <div>\n        <h1>List connected</h1>\n        {renderAll()}\n      </div>\n    </div>\n    </Container>\n    </div>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}